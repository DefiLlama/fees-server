service: llama-fees

package:
  individually: true
  excludeDevDependencies: true

provider:
  name: aws
  runtime: nodejs16.x
  memorySize: 250
  region: eu-central-1
  stage: dev # Default to dev if no stage is specified
  tracing: # Enable X-Ray tracing (debugging)
    apiGateway: true
    lambda: true
  iamRoleStatements:
    - Effect: Allow # X-Ray permissions
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
      Resource:
        - "Fn::GetAtt": [DynamoTable, Arn]
    - Effect: Allow # Lambda logs on cloudwatch
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - "Fn::Join":
            - ":"
            - - "arn:aws:logs"
              - Ref: "AWS::Region"
              - Ref: "AWS::AccountId"
              - "log-group:/aws/lambda/*:*:*"
    # For warm-up functions
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:*Object*"
      Resource: "*"

  environment:
    ETHEREUM_RPC: ${file(./env.js):ETHEREUM_RPC}
    BSC_RPC: ${file(./env.js):BSC_RPC}
    POLYGON_RPC: ${file(./env.js):POLYGON_RPC}
    FANTOM_RPC: ${file(./env.js):FANTOM_RPC}
    ARBITRUM_RPC: ${file(./env.js):ARBITRUM_RPC}
    OPTIMISM_RPC: ${file(./env.js):OPTIMISM_RPC}\
    HARMONY_RPC: ${file(./env.js):HARMONY_RPC}
    tableName: ${self:custom.tableName}
    stage: ${self:custom.stage}

custom:
  stage: ${opt:stage, self:provider.stage}
  esbuild:
    bundle: true
    minify: false
    concurrency: 4
    # for debugging
    #keepOutputDirectory: true
  prune:
    automatic: true
    number: 5 # Number of versions to keep
  tableName: prod-fees-table
  domainMap:
    prod:
      domain: fees.llama.fi
      certificateArn: "arn:aws:acm:us-east-1:856461987125:certificate/b4209013-30a6-417e-847e-6e630c3e77fe"
      hostedZone: llama.fi
    dev:
      domain: staging-fees.llama.fi
      certificateArn: "arn:aws:acm:us-east-1:856461987125:certificate/b4209013-30a6-417e-847e-6e630c3e77fe"
      hostedZone: llama.fi
  domain: ${self:custom.domainMap.${self:custom.stage}.domain}
  certificateArn: ${self:custom.domainMap.${self:custom.stage}.certificateArn}
  hostedZone: ${self:custom.domainMap.${self:custom.stage}.hostedZone}

functions:
  getFees:
    handler: src/handlers/getFees.default
    timeout: 900
    memorySize: 512
    events:
      - http:
          method: get
          path: /fees
  storeFees:
    handler: src/handlers/storeFees.default
    timeout: 900
    memorySize: 512
  triggerStoreFees:
    handler: src/handlers/triggerStoreFees.default
    timeout: 900
    events:
      - schedule: cron(20 * * * ? *)

resources:
  # CORS for api gateway errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # Cloudfront API distribution
  - ${file(resources/api-cloudfront-distribution.yml)}

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-prune-plugin
